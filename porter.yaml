# This is the configuration for Porter
# You must define steps for each action, but the rest is optional
# See https://porter.sh/author-bundles for documentation on how to configure your bundle
# Uncomment out the sections below to take full advantage of what Porter can do!

name: capz
version: 0.1.5
description: "Installs and deletes the Cluster API Azure provider on a kubernetes cluster."
# TODO: update the registry to your own, e.g. myregistry
registry: ghcr.io/squillace

# If you want to customize the Dockerfile in use, uncomment the line below and update the referenced file. 
# See https://porter.sh/custom-dockerfile/
#dockerfile: Dockerfile.tmpl

mixins:
  - exec
  - capz
  - kubernetes

customActions:
  create-quickstart:
    description: "Creates a new cluster using clusterctl."
    stateless: false
    modifies: true

install:
#export AZURE_SUBSCRIPTION_ID_B64="$(echo -n "$AZURE_SUBSCRIPTION_ID" | base64 | tr -d '\n')"
#export AZURE_TENANT_ID_B64="$(echo -n "$AZURE_TENANT_ID" | base64 | tr -d '\n')"
#export AZURE_CLIENT_ID_B64="$(echo -n "$AZURE_CLIENT_ID" | base64 | tr -d '\n')"
#export AZURE_CLIENT_SECRET_B64="$(echo -n "$AZURE_CLIENT_SECRET" | base64 | tr -d '\n')"

  - capz:
      description: "Installing Cluster API into the cluster...."
      arguments:
        - "init"
      flags:
        infrastructure: "azure"

create-quickstart:
#  - capz:
#      description: "Creating the cluster configuration file..."
#      suppress-output: false
#      arguments:
#        - "config"
#        - "cluster"
#        - "capi-quickstart"
#      flags:
#        kubernetes-version: "v1.18.2"
#        control-plane-machine-count: "3"
#        worker-machine-count: "3"
#      outputs:
#        - name: QUICKSTART_YAML
#          regex: "(.*)"
#          path: "/cnab/app/quickstart.yaml"

  - exec:
      command: capture.sh
      description: "Creating a configuration..."
      suppress-output: false

  - kubernetes:
      description: "Creating a cluster...."
      manifests:
        - "quickstart.yaml"
      wait: true 
  - exec:
      command: kubectl
      description: "configuring CNI"
      suppress-output: false
      arguments:
        - apply
      flags:
        kubeconfig: "capi-quickstart.yaml"
        f: https://raw.githubusercontent.com/kubernetes-sigs/cluster-api-provider-azure/master/templates/addons/calico.yaml

upgrade:
  - exec:
      description: "World 2.0"
      command: ./helpers.sh
      arguments:
        - upgrade

uninstall:
  - capz:
      description: "Uninstalling the management control plane from the cluster..."
      arguments:
        - "delete"
      flags:
        all: ""
        include-crd: ""
        include-namespace: ""
  - exec:
      command: kubectl
      description: "TEMPORARY: Destroying the remaining capi and cert-manager namespaces."
      suppress-output: false
      arguments:
        - "delete"
        - "ns"
        - "capi-webhook-system"
        - "cert-manager"


#Available Commands:
#  completion  Output shell completion code for the specified shell (bash or zsh)
#  config      Display provider configuration and templates to create workload clusters.
#  delete      Delete one or more providers from the management cluster.
#  describe    Describe workload clusters.
#  generate    Generate yaml using clusterctl yaml processor.
#  get         Get info from a management or a workload cluster
#  help        Help about any command
#  init        Initialize a management cluster.
#  move        Move Cluster API objects and all dependencies between management clusters.
#  upgrade     Upgrade core and provider components in a management cluster.
#  version     Print clusterctl version.

#Flags:
#      --config $HOME/.cluster-api/clusterctl.yaml   Path to clusterctl configuration (default is $HOME/.cluster-api/clusterctl.yaml) or to a remote location (i.e. https://example.com/clusterctl.yaml)
#  -h, --help                                        help for clusterctl
#  -v, --v int                                       Set the log level verbosity. This overrides the CLUSTERCTL_LOG_LEVEL environment variable.

parameters:
  - name: AZURE_LOCATION
    type: string
    env: AZURE_LOCATION
    description: "the Azure location to use for the cluster."
    default: "eastus2"
  - name: AZURE_CONTROL_PLANE_MACHINE_TYPE
    env: AZURE_CONTROL_PLANE_MACHINE_TYPE
    type: string
    description: "The control plane sku"
    default: "Standard_D2s_v3"
  - name: AZURE_NODE_MACHINE_TYPE
    env: AZURE_NODE_MACHINE_TYPE
    type: string
    description: "the sku"
    default: "Standard_D2s_v3"

# Select VM types.
#export AZURE_CONTROL_PLANE_MACHINE_TYPE="Standard_D2s_v3"
#export AZURE_NODE_MACHINE_TYPE="Standard_D2s_v3"

# Below is an example of how to define credentials
# See https://porter.sh/author-bundles/#credentials
credentials:
  - name: kubeconfig
    path: /root/.kube/config
  - name: AZURE_SUBSCRIPTION_ID_B64
    env: AZURE_SUBSCRIPTION_ID_B64
    type: string
    description: "The Azure subscription id in base 64"
  - name: AZURE_TENANT_ID_B64
    env: AZURE_TENANT_ID_B64
    type: string
    description: "The Azure tenant id in base 64"
  - name: AZURE_CLIENT_ID_B64
    env: AZURE_CLIENT_ID_B64
    type: string
    description: "The Azure client or app id in base 64"
  - name: AZURE_CLIENT_SECRET_B64
    env: AZURE_CLIENT_SECRET_B64
    type: string
    description: "The Azure app password or secret"  
  - name: AZURE_ENVIRONMENT
    env: AZURE_ENVIRONMENT
    default: AzurePublicCloud
    type: string
    description: "The Azure cloud environment into which to deploy"
  - name: AZURE_SUBSCRIPTION_ID
    env: AZURE_SUBSCRIPTION_ID
    default: AzurePublicCloud
    type: string
    description: "The Azure cloud environment into which to deploy"
  - name: GITHUB_TOKEN
    env: GITHUB_TOKEN
    type: string
    description: "A GitHub personal access token to work around gh api quota limits temporarily."
#  - name: username
#    env: USERNAME

# Below is an example of how to define parameters
# See https://porter.sh/author-bundles/#parameters
    


